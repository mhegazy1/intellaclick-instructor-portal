const u={},y=typeof import.meta<"u"&&(u==null?void 0:u.VITE_API_URL)||"https://api-modular.intellaclick.com/api";function l(){const e=localStorage.getItem("token");return{"Content-Type":"application/json",...e&&{Authorization:`Bearer ${e}`}}}async function g(e){var t,n,i,r,d;if(!e.ok){if(e.status===401){const a=await e.json().catch(()=>({error:"Authentication failed"}));if(((t=a.error)==null?void 0:t.toLowerCase().includes("token"))||((n=a.error)==null?void 0:n.toLowerCase().includes("expired"))||((i=a.error)==null?void 0:i.toLowerCase().includes("jwt"))||((r=a.message)==null?void 0:r.toLowerCase().includes("token"))||((d=a.message)==null?void 0:d.toLowerCase().includes("expired")))throw localStorage.removeItem("token"),localStorage.removeItem("refreshToken"),localStorage.removeItem("user"),alert("Your session has expired. Please log in again."),window.location.href="/login.html",new Error("Session expired. Please log in again.")}const c=await e.json().catch(()=>({error:"Request failed"}));console.error("API Error Response:",{status:e.status,statusText:e.statusText,url:e.url,errorData:c});let o=c.error||c.message||`HTTP ${e.status}`;throw(o.includes("E11000")||o.includes("duplicate key"))&&(o.includes("code_1")||o.includes("code:")?o="A class with this code already exists. Please use a different class code.":o="This record already exists in the database."),new Error(o)}return e.json()}async function s(e,t={}){const n=`${y}${e}`,i={...t,headers:{...l(),...t.headers}};try{const r=await fetch(n,i);return await g(r)}catch(r){throw console.error(`API Error [${e}]:`,r),r}}const S={async login(e,t){return s("/auth/login",{method:"POST",body:JSON.stringify({email:e,password:t})})},async register(e){return s("/auth/register",{method:"POST",body:JSON.stringify(e)})},async getMe(){return s("/auth/me")}},m={async getAll(e={}){const t=new URLSearchParams(e).toString();return s(`/sessions${t?`?${t}`:""}`)},async getActive(){return s("/sessions/instructor/active")},async create(e){return s("/sessions",{method:"POST",body:JSON.stringify(e)})},async getById(e){return s(`/sessions/${e}`)},async getByCode(e){return s(`/sessions/code/${e}`)},async updateStatus(e,t){return s(`/sessions/${e}/status`,{method:"PATCH",body:JSON.stringify({status:t})})},async getCurrentQuestion(e){return s(`/sessions/${e}/current-question`)},async nextQuestion(e){return s(`/sessions/${e}/next-question`,{method:"POST"})},async endQuestion(e){return s(`/sessions/${e}/end-question`,{method:"POST"})},async end(e){return s(`/sessions/${e}/end`,{method:"POST"})},async getResponses(e){return s(`/sessions/${e}/responses`)},async delete(e){return s(`/sessions/${e}`,{method:"DELETE"})},async getCurrentQuestionByCode(e){return s(`/sessions/code/${e}/current-question`)},async getByCodeFull(e){return s(`/sessions/code/${e}`)},async startQuestionTimer(e,t,n){return s(`/sessions/${e}/questions/${t}/timer`,{method:"POST",body:JSON.stringify({timeLimit:n})})},async addQuestionTime(e,t,n){return s(`/sessions/${e}/questions/${t}/timer`,{method:"POST",body:JSON.stringify({addSeconds:n})})},async endQuestionSession(e,t){return s(`/sessions/${e}/questions/${t}/end`,{method:"POST"})},async addQuestions(e,t){return s(`/sessions/${e}/questions`,{method:"POST",body:JSON.stringify({questions:t})})}},$={async getAll(e={}){const t=new URLSearchParams(e).toString();return s(`/classes${t?`?${t}`:""}`)},async getById(e){return s(`/classes/${e}`)},async create(e){return s("/classes",{method:"POST",body:JSON.stringify(e)})},async update(e,t){return s(`/classes/${e}`,{method:"PUT",body:JSON.stringify(t)})},async delete(e,t={}){const n=new URLSearchParams(t).toString();return s(`/classes/${e}${n?`?${n}`:""}`,{method:"DELETE"})},async archive(e){return s(`/classes/${e}/archive`,{method:"POST"})},async getStudents(e){return s(`/classes/${e}/students`)}},f={async getSettings(e){return s(`/gamification/settings/${e}`)},async updateSettings(e,t){return s(`/gamification/settings/${e}`,{method:"PUT",body:JSON.stringify(t)})},async getLeaderboard(e){return s(`/gamification/leaderboard/${e}`)},async getStudentStats(e,t){return s(`/gamification/stats/${e}/${t}`)},async syncInstructorSessions(e,t={}){const n=new URLSearchParams(t).toString();return s(`/gamification/sync-instructor-sessions/${e}${n?`?${n}`:""}`,{method:"POST"})}},T={async getAll(){return s("/quizzes")},async getById(e){return s(`/quizzes/${e}`)},async create(e){return s("/quizzes",{method:"POST",body:JSON.stringify(e)})},async update(e,t){return s(`/quizzes/${e}`,{method:"PUT",body:JSON.stringify(t)})},async delete(e){return s(`/quizzes/${e}`,{method:"DELETE"})},async duplicate(e){return s(`/quizzes/${e}/duplicate`,{method:"POST"})}},P={async getAll(){return s("/question-sets")},async getById(e){return s(`/question-sets/${e}`)},async create(e){return s("/question-sets",{method:"POST",body:JSON.stringify(e)})},async update(e,t){return s(`/question-sets/${e}`,{method:"PUT",body:JSON.stringify(t)})},async delete(e){return s(`/question-sets/${e}`,{method:"DELETE"})}};export{S as a,P as b,$ as c,f as g,T as q,m as s};
