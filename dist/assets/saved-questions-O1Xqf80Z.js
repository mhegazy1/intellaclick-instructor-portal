import"./toast-93yYkT8V.js";/* empty css               */import{b as h}from"./api-BBvzFwfC.js";import{l as i}from"./logger-gSLuc3Ra.js";import{l as u}from"./loading-CWfhFw7n.js";let d=[],c=new Set;i.debug("🔵 Saved Questions Page Loaded - Version 1.0.2-button-fix");document.addEventListener("DOMContentLoaded",()=>{i.debug("🔵 DOMContentLoaded - initializing page"),b()});async function b(){u.show("Loading question sets...");try{const e=localStorage.getItem("token");if(!e)throw new Error("Not authenticated. Please log in.");i.debug("Loading question sets from cloud API..."),i.debug("Token present:",!!e),d=(await h.getAll()).questionSets||[],i.debug(`✅ Loaded ${d.length} question sets from cloud`),document.getElementById("totalSets").textContent=d.length;const n=d.reduce((o,s)=>{var r;return o+(s.questionCount||((r=s.questions)==null?void 0:r.length)||0)},0);document.getElementById("totalQuestions").textContent=n,w(d)}catch(e){i.error("Error loading question sets:",e),i.error("Error details:",e.message),alert(`Failed to load question sets: ${e.message}

The backend may need to be restarted on Coolify.`),document.getElementById("totalSets").textContent="0",document.getElementById("totalQuestions").textContent="0",w([])}finally{u.hide()}}function w(e){const t=document.getElementById("questionSetsContainer"),n=document.getElementById("emptyState");if(e.length===0){t.style.display="none",n.style.display="block";return}t.style.display="grid",n.style.display="none",t.innerHTML=e.map((o,s)=>{const r=new Date(o.createdAt).toLocaleDateString(),l=new Date(o.createdAt).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"}),A=o.questions.slice(0,3).map(S=>{const C=x(S.type),I=S.text||S.questionText||"Question";return`<div class="question-preview-item">
                        <span class="question-type-badge">${C}</span>
                        ${I.substring(0,60)}${I.length>60?"...":""}
                    </div>`}).join(""),g=o._id||o.id,T=c.has(g);return`
                    <div class="question-set-card">
                        <div class="question-set-header-with-checkbox">
                            <input type="checkbox" class="set-checkbox"
                                   data-set-id="${g}"
                                   ${T?"checked":""}
                                   onclick="toggleSetSelection('${g}')">
                            <div class="question-set-header-content">
                                <div class="question-set-header">
                                    <div>
                                        <div class="question-set-title">${o.name}</div>
                                        <div class="question-set-meta">${r} at ${l}</div>
                                    </div>
                                    <span class="question-count-badge">${o.questionCount} Q's</span>
                                </div>
                            </div>
                        </div>

                        <div class="question-preview">
                            ${A}
                            ${o.questions.length>3?`<div style="text-align: center; padding: 0.5rem; color: var(--text-secondary); font-size: 0.875rem;">+ ${o.questions.length-3} more questions</div>`:""}
                        </div>

                        <div class="question-set-actions">
                            <button class="btn btn-primary" onclick="event.stopPropagation(); showQuestionSelector('${g}')">
                                Use Questions
                            </button>
                            <button class="btn btn-secondary" onclick="event.stopPropagation(); editQuestionSet('${g}')">
                                Edit
                            </button>
                            <button class="btn btn-secondary" onclick="event.stopPropagation(); viewQuestionSet('${g}')">
                                View All
                            </button>
                            <button class="btn btn-danger" onclick="event.stopPropagation(); deleteQuestionSet('${g}')">
                                Delete
                            </button>
                        </div>
                    </div>
                `}).join(""),ee()}function x(e){return{mcq:"Multiple Choice",tf:"True/False",matching:"Matching",ordering:"Put in Order",fillblank:"Fill Blank"}[e]||e}function M(){const e=document.getElementById("searchInput").value.toLowerCase();if(!e){w(d);return}const t=d.filter(n=>n.name.toLowerCase().includes(e)||n.questions.some(o=>(o.text||o.questionText||"").toLowerCase().includes(e)));w(t)}function P(e){i.debug("Viewing question set:",e);const t=d.find(s=>(s._id||s.id)===e);if(!t){alert("Question set not found");return}let n=`<div style="max-width: 600px; text-align: left;">
                <h3>${t.name}</h3>
                <p><strong>Created:</strong> ${new Date(t.createdAt).toLocaleString()}</p>
                <p><strong>Questions:</strong> ${t.questionCount}</p>
                <hr style="margin: 1rem 0;">`;t.questions.forEach((s,r)=>{const l=x(s.type);n+=`<div style="margin-bottom: 1rem; padding: 1rem; background: #f8f9fa; border-radius: 8px;">
                    <strong>${r+1}. [${l}]</strong><br>
                    ${s.text||s.questionText}
                </div>`}),n+="</div>";const o=document.createElement("div");o.style.cssText="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 10000; padding: 2rem;",o.innerHTML=`<div style="background: white; padding: 2rem; border-radius: 12px; max-height: 80vh; overflow-y: auto; max-width: 800px;">${n}<button class="btn btn-primary" onclick="this.closest('div[style*=fixed]').remove()" style="margin-top: 1rem; width: 100%;">Close</button></div>`,document.body.appendChild(o),o.addEventListener("click",s=>{s.target===o&&o.remove()})}async function O(e){i.debug("Deleting question set:",e);const t=d.find(o=>(o._id||o.id)===e);if(!t){alert("Question set not found");return}if(await confirm(`Delete "${t.name}"?

This cannot be undone.`)){u.show("Deleting question set...");try{await h.delete(e),i.debug("✅ Question set deleted successfully"),alert("Question set deleted successfully"),b()}catch(o){i.error("Error deleting question set:",o),alert(`Failed to delete question set: ${o.message}`)}finally{u.hide()}}}function N(){localStorage.getItem("token")||(window.location.href="login.html")}let a=[],m=null;function D(){a=[],m=null,v=null,document.getElementById("newSetName").value="",document.getElementById("newQuestionsList").innerHTML="",document.getElementById("emptyQuestions").style.display="block",document.getElementById("saveButtonText").textContent="Save Question Set",document.getElementById("createModal").style.display="flex"}function E(){document.getElementById("createModal").style.display="none",v=null}function F(){m=null,document.getElementById("builderQuestionText").value="",document.getElementById("builderQuestionType").value="mcq",document.getElementById("optionsList").innerHTML="",f=0,q(),document.getElementById("questionBuilderModal").style.display="flex"}function Q(){document.getElementById("questionBuilderModal").style.display="none",p!==null&&(p=null,document.getElementById("questionSelectorModal").style.display="flex")}function q(){const e=document.getElementById("builderQuestionType").value;if(document.getElementById("mcqOptions").style.display="none",document.getElementById("tfOptions").style.display="none",document.getElementById("fillBlankOptions").style.display="none",e==="tf")document.getElementById("tfOptions").style.display="block";else if(e==="fillblank")document.getElementById("fillBlankOptions").style.display="block";else if(document.getElementById("mcqOptions").style.display="block",document.getElementById("optionsList").children.length===0)for(let n=0;n<4;n++)k()}let f=0;function k(){const e=document.getElementById("optionsList"),t=f++,n=document.createElement("div");n.style.cssText="display: flex; gap: 8px; margin-bottom: 8px; align-items: center;",n.innerHTML=`
                <input type="radio" name="correctAnswer" value="${t}" ${t===0?"checked":""} style="width: 20px; height: 20px;">
                <input type="text" class="option-input" placeholder="Option ${String.fromCharCode(65+t)}" required style="flex: 1; padding: 0.5rem; border: 1px solid #e5e7eb; border-radius: 6px;">
                <button type="button" onclick="removeOption(this)" style="padding: 0.5rem; background: #ef4444; color: white; border: none; border-radius: 6px; cursor: pointer;">✕</button>
            `,e.appendChild(n)}function H(e){document.getElementById("optionsList").children.length>2?e.parentElement.remove():alert("You must have at least 2 options")}async function U(e){e.preventDefault(),i.debug("=== saveQuestion called ==="),i.debug("currentEditingIndex:",m),i.debug("editingSelectorQuestionIndex:",p);try{const t=document.getElementById("builderQuestionType").value,n=document.getElementById("builderQuestionText").value.trim();if(i.debug("Question type:",t),i.debug("Question text:",n),!n){alert("Please enter question text");return}const o={type:t,text:n};if(t==="mcq"){const s=Array.from(document.querySelectorAll(".option-input")).map(l=>l.value.trim()),r=parseInt(document.querySelector('input[name="correctAnswer"]:checked').value);if(i.debug("MCQ options:",s),i.debug("Correct index:",r),s.some(l=>!l)){alert("Please fill in all options");return}o.options=s,o.correctAnswer=r}else if(t==="tf")o.correctAnswer=document.getElementById("builderTFAnswer").value,i.debug("TF correct answer:",o.correctAnswer);else if(t==="fillblank"){const s=document.getElementById("builderFillBlankAnswers").value.trim();if(!s){alert("Please enter at least one acceptable answer");return}const r=s.split(`
`).map(l=>l.trim()).filter(l=>l.length>0);if(r.length===0){alert("Please enter at least one acceptable answer");return}o.correctAnswer=r,i.debug("Fill-blank correct answers:",r)}if(p!==null){Q(),await R(o);return}m!==null?(a[m]=o,i.debug("✅ Question updated at index:",m)):(a.push(o),i.debug("✅ Question added. Total questions:",a.length)),B(),Q(),m=null,f=0,document.getElementById("optionsList").innerHTML=""}catch(t){i.error("❌ Error saving question:",t),alert("Error saving question: "+t.message)}}function B(){const e=document.getElementById("newQuestionsList"),t=document.getElementById("emptyQuestions");if(a.length===0){e.innerHTML="",t.style.display="block";return}t.style.display="none",e.innerHTML=a.map((n,o)=>`
                <div style="background: #f9fafb; padding: 1rem; border-radius: 8px; margin-bottom: 0.75rem; display: flex; justify-content: space-between; align-items: start;">
                    <div style="flex: 1;">
                        <div style="font-weight: 600; margin-bottom: 0.25rem;">Q${o+1}: ${n.text}</div>
                        <div style="font-size: 0.875rem; color: #6b7280;">Type: ${x(n.type)}</div>
                    </div>
                    <div style="display: flex; gap: 8px;">
                        <button class="btn btn-secondary" onclick="editNewQuestion(${o})" style="padding: 0.5rem 1rem; font-size: 0.875rem;">Edit</button>
                        <button class="btn btn-danger" onclick="removeNewQuestion(${o})" style="padding: 0.5rem 1rem; font-size: 0.875rem;">Remove</button>
                    </div>
                </div>
            `).join("")}function z(e){const t=a[e];if(m=e,document.getElementById("builderQuestionType").value=t.type,document.getElementById("builderQuestionText").value=t.text,t.type==="mcq")document.getElementById("optionsList").innerHTML="",f=0,t.options.forEach((n,o)=>{const s=document.createElement("div");s.style.cssText="display: flex; gap: 8px; margin-bottom: 8px; align-items: center;",s.innerHTML=`
                        <input type="radio" name="correctAnswer" value="${o}" ${o===t.correctAnswer?"checked":""} style="width: 20px; height: 20px;">
                        <input type="text" class="option-input" value="${n}" placeholder="Option ${String.fromCharCode(65+o)}" required style="flex: 1; padding: 0.5rem; border: 1px solid #e5e7eb; border-radius: 6px;">
                        <button type="button" onclick="removeOption(this)" style="padding: 0.5rem; background: #ef4444; color: white; border: none; border-radius: 6px; cursor: pointer;">✕</button>
                    `,document.getElementById("optionsList").appendChild(s),f++});else if(t.type==="tf")document.getElementById("builderTFAnswer").value=t.correctAnswer;else if(t.type==="fillblank"){const n=Array.isArray(t.correctAnswer)?t.correctAnswer:[t.correctAnswer];document.getElementById("builderFillBlankAnswers").value=n.join(`
`)}q(),document.getElementById("questionBuilderModal").style.display="flex"}function _(e){a.splice(e,1),B()}async function j(){const e=document.getElementById("newSetName").value.trim();if(!e){alert("Please enter a question set name");return}if(a.length===0){alert("Please add at least one question");return}u.show("Saving question set...");try{await h.create({name:e,questions:a}),i.debug("✅ Question set saved successfully"),alert(`✅ Question set "${e}" created successfully with ${a.length} questions!`),E(),b()}catch(t){i.error("Error saving question set:",t),alert(`Failed to save question set: ${t.message}`)}finally{u.hide()}}let y=null,p=null;function $(e){i.debug("Opening question selector for set:",e);const t=d.find(o=>(o._id||o.id)===e);if(!t){alert("Question set not found");return}y=e;const n=document.getElementById("questionCheckboxList");n.innerHTML=t.questions.map((o,s)=>{const r=x(o.type),l=o.text||o.questionText||"Question";return`
                    <div style="padding: 1rem; background: #f9fafb; border-radius: 8px; margin-bottom: 0.75rem;">
                        <div style="display: flex; align-items: start; gap: 12px;">
                            <input type="checkbox" class="question-checkbox" data-index="${s}" checked style="width: 20px; height: 20px; margin-top: 2px; flex-shrink: 0;">
                            <div style="flex: 1;">
                                <div style="font-weight: 600; margin-bottom: 0.25rem;">
                                    <span class="question-type-badge" style="margin-right: 8px;">${r}</span>
                                    Q${s+1}: ${l.substring(0,80)}${l.length>80?"...":""}
                                </div>
                            </div>
                            <button class="btn btn-secondary" onclick="editSelectorQuestion(${s}); event.stopPropagation();" style="padding: 0.5rem 1rem; font-size: 0.875rem; flex-shrink: 0;">Edit</button>
                        </div>
                    </div>
                `}).join(""),document.getElementById("questionSelectorModal").style.display="flex"}function L(){document.getElementById("questionSelectorModal").style.display="none",y=null,p=null}async function V(e){const t=d.find(o=>(o._id||o.id)===y);if(!t){alert("Question set not found");return}const n=t.questions[e];if(p=e,document.getElementById("questionSelectorModal").style.display="none",document.getElementById("builderQuestionType").value=n.type,document.getElementById("builderQuestionText").value=n.text||n.questionText,n.type==="mcq")document.getElementById("optionsList").innerHTML="",f=0,n.options.forEach((o,s)=>{const r=document.createElement("div");r.style.cssText="display: flex; gap: 8px; margin-bottom: 8px; align-items: center;",r.innerHTML=`
                        <input type="radio" name="correctAnswer" value="${s}" ${s===n.correctAnswer?"checked":""} style="width: 20px; height: 20px;">
                        <input type="text" class="option-input" value="${o}" placeholder="Option ${String.fromCharCode(65+s)}" required style="flex: 1; padding: 0.5rem; border: 1px solid #e5e7eb; border-radius: 6px;">
                        <button type="button" onclick="removeOption(this)" style="padding: 0.5rem; background: #ef4444; color: white; border: none; border-radius: 6px; cursor: pointer;">✕</button>
                    `,document.getElementById("optionsList").appendChild(r),f++});else if(n.type==="tf")document.getElementById("builderTFAnswer").value=n.correctAnswer;else if(n.type==="fillblank"){const o=Array.isArray(n.correctAnswer)?n.correctAnswer:[n.correctAnswer];document.getElementById("builderFillBlankAnswers").value=o.join(`
`)}q(),document.getElementById("questionBuilderModal").style.display="flex"}async function R(e){const t=d.find(n=>(n._id||n.id)===y);if(!t){alert("Question set not found");return}t.questions[p]=e,u.show("Updating question...");try{await h.update(y,{name:t.name,questions:t.questions}),i.debug("✅ Question updated in database"),p=null,$(y)}catch(n){i.error("Error updating question:",n),alert(`Failed to update question: ${n.message}`),p=null,document.getElementById("questionSelectorModal").style.display="flex"}finally{u.hide()}}function G(){document.querySelectorAll(".question-checkbox").forEach(e=>e.checked=!0)}function J(){document.querySelectorAll(".question-checkbox").forEach(e=>e.checked=!1)}function Y(){const e=d.find(l=>(l._id||l.id)===y);if(!e){alert("Question set not found");return}const t=document.querySelectorAll(".question-checkbox"),n=Array.from(t).filter(l=>l.checked).map(l=>parseInt(l.dataset.index));if(n.length===0){alert("Please select at least one question");return}const o=n.map(l=>({...e.questions[l],timeLimit:e.questions[l].timeLimit||60,points:e.questions[l].points||10}));sessionStorage.setItem("pendingQuestions",JSON.stringify(o)),sessionStorage.setItem("fromSavedSet","true"),i.debug(`✅ Loaded ${o.length} questions from "${e.name}"`);const r=new URLSearchParams(window.location.search).get("returnUrl")||sessionStorage.getItem("createSessionUrl");L(),r?window.location.href=r:alert(`✅ Loaded ${o.length} questions from "${e.name}"!

Go back to the session page to use them.`)}let v=null;function K(e){i.debug("Opening editor for set:",e);const t=d.find(n=>(n._id||n.id)===e);if(!t){alert("Question set not found");return}v=e,a=[...t.questions],m=null,document.getElementById("newSetName").value=t.name,document.getElementById("saveButtonText").textContent="Update Question Set",B(),document.getElementById("createModal").style.display="flex"}async function W(){const e=document.getElementById("newSetName").value.trim();if(!e){alert("Please enter a question set name");return}if(a.length===0){alert("Please add at least one question");return}u.show("Updating question set...");try{await h.update(v,{name:e,questions:a}),i.debug("✅ Question set updated successfully"),alert(`✅ Question set "${e}" updated successfully with ${a.length} questions!`),v=null,E(),b()}catch(t){i.error("Error updating question set:",t),alert(`Failed to update question set: ${t.message}`)}finally{u.hide()}}function X(e){c.has(e)?c.delete(e):c.add(e),w(d)}function Z(){const e=d;c.size===e.length&&e.length>0?c.clear():e.forEach(t=>{const n=t._id||t.id;c.add(n)}),w(d)}function ee(){const e=c.size;document.getElementById("selectedCount").textContent=e,document.getElementById("deleteSelectedBtn").disabled=e===0;const t=d,n=e>0&&e===t.length;document.getElementById("selectAllText").textContent=n?"Deselect All":"Select All"}async function te(){const e=c.size;if(!(e===0||!await confirm(`Are you sure you want to delete ${e} question set${e>1?"s":""}? This action cannot be undone.`))){u.show(`Deleting ${e} question set${e>1?"s":""}...`);try{const n=Array.from(c).map(o=>h.delete(o));await Promise.all(n),alert(`Successfully deleted ${e} question set${e>1?"s":""}!`),c.clear(),b()}catch(n){i.error("Error deleting question sets:",n),alert("Some question sets could not be deleted. Please try again."),b()}finally{u.hide()}}}N();window.toggleSelectAll=Z;window.deleteSelected=te;window.showCreateQuestionSetModal=D;window.closeCreateModal=E;window.addNewQuestion=F;window.updateQuestionSet=W;window.saveNewQuestionSet=j;window.closeQuestionBuilder=Q;window.updateQuestionBuilderUI=q;window.addOption=k;window.removeOption=H;window.saveQuestion=U;window.editNewQuestion=z;window.removeNewQuestion=_;window.selectAllQuestions=G;window.deselectAllQuestions=J;window.closeSelectorModal=L;window.loadSelectedQuestions=Y;window.editSelectorQuestion=V;window.toggleSetSelection=X;window.showQuestionSelector=$;window.editQuestionSet=K;window.viewQuestionSet=P;window.deleteQuestionSet=O;window.filterQuestionSets=M;
