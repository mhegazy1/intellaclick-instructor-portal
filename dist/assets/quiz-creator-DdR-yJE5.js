import{a as s}from"./toast-93yYkT8V.js";import{q as m}from"./api-BBvzFwfC.js";let n=[],c=[],d=null;window.addEventListener("DOMContentLoaded",async()=>{await g(),q(),f()});async function g(){try{c=[];const e=document.getElementById("quiz-category");c.forEach(t=>{const o=document.createElement("option");o.value=t.id,o.textContent=t.name,e.appendChild(o)})}catch(e){console.error("Failed to load categories:",e)}}function f(){const e=localStorage.getItem("quizCreatorReturn");if(e)try{const t=JSON.parse(e);t.questions&&Array.isArray(t.questions)&&(v(t.questions),s("Questions added successfully","success")),localStorage.removeItem("quizCreatorReturn")}catch(t){console.error("Error processing returned questions:",t)}}function q(){console.log("Quiz creator initialized with cloud API")}function v(e){e.forEach(t=>{n.find(o=>o.id===t.id||o._id===t._id)||n.push(t)}),u(),setTimeout(()=>{document.getElementById("quiz-title").removeAttribute("disabled"),document.getElementById("quiz-description").removeAttribute("disabled"),document.getElementById("quiz-category").removeAttribute("disabled")},100)}function u(){const e=document.getElementById("quiz-title").value,t=document.getElementById("quiz-description").value,o=document.getElementById("quiz-category").value,i=document.getElementById("question-list");if(document.getElementById("question-count").textContent=n.length,n.length===0){i.innerHTML=`
            <div class="empty-state">
                <i class="fas fa-clipboard-list"></i>
                <p>No questions added yet</p>
                <p>Add questions from the question bank or create new ones</p>
            </div>
        `;return}i.innerHTML=n.map((r,a)=>`
        <div class="question-item" draggable="true" data-index="${a}">
            <div class="question-content">
                <div class="question-text">${a+1}. ${r.text||r.question||"Untitled Question"}</div>
                <div class="question-meta">
                    Type: ${r.type||"N/A"} | Category: ${w(r.categoryId)||"Uncategorized"}
                </div>
            </div>
            <div class="question-actions">
                <button class="btn btn-small btn-secondary" onclick="window.quizCreator.moveQuestion(${a}, -1)"
                        ${a===0?"disabled":""}>
                    <i class="fas fa-arrow-up"></i>
                </button>
                <button class="btn btn-small btn-secondary" onclick="window.quizCreator.moveQuestion(${a}, 1)"
                        ${a===n.length-1?"disabled":""}>
                    <i class="fas fa-arrow-down"></i>
                </button>
                <button class="btn btn-small btn-danger" onclick="window.quizCreator.removeQuestion(${a})">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `).join(""),y(),document.getElementById("quiz-title").value=e,document.getElementById("quiz-description").value=t,document.getElementById("quiz-category").value=o}function y(){document.querySelectorAll(".question-item").forEach(t=>{t.addEventListener("dragstart",z),t.addEventListener("dragover",h),t.addEventListener("drop",p),t.addEventListener("dragend",I)})}function z(e){d=this,this.classList.add("dragging"),e.dataTransfer.effectAllowed="move",e.dataTransfer.setData("text/html",this.innerHTML)}function h(e){return e.preventDefault&&e.preventDefault(),e.dataTransfer.dropEffect="move",E(e.currentTarget.parentNode,e.clientY)==null&&e.currentTarget.classList.add("drag-over"),!1}function p(e){if(e.stopPropagation&&e.stopPropagation(),d!==this){const t=parseInt(d.dataset.index),o=parseInt(this.dataset.index),i=n[t];n.splice(t,1),n.splice(o,0,i),u()}return!1}function I(e){document.querySelectorAll(".question-item").forEach(o=>{o.classList.remove("dragging"),o.classList.remove("drag-over")})}function E(e,t){return[...e.querySelectorAll(".question-item:not(.dragging)")].reduce((i,r)=>{const a=r.getBoundingClientRect(),l=t-a.top-a.height/2;return l<0&&l>i.offset?{offset:l,element:r}:i},{offset:Number.NEGATIVE_INFINITY}).element}function w(e){const t=c.find(o=>o.id===e);return t?t.name:null}function b(e,t){const o=e+t;if(o>=0&&o<n.length){const i=n[e];n[e]=n[o],n[o]=i,u()}}function S(e){confirm("Remove this question from the quiz?")&&(n.splice(e,1),u())}async function B(){try{const e={title:document.getElementById("quiz-title").value,description:document.getElementById("quiz-description").value,categoryId:document.getElementById("quiz-category").value,questions:n};localStorage.setItem("quizCreatorState",JSON.stringify(e)),localStorage.setItem("quizCreatorMode","selecting"),window.location.href="saved-questions.html?mode=select&returnTo=quiz-creator"}catch(e){console.error("Failed to open question bank:",e),s("Failed to open question bank","error")}}async function C(){try{const e={title:document.getElementById("quiz-title").value,description:document.getElementById("quiz-description").value,categoryId:document.getElementById("quiz-category").value,questions:n};localStorage.setItem("quizCreatorState",JSON.stringify(e)),window.location.href="question-editor-enhanced.html?returnTo=quiz-creator"}catch(e){console.error("Failed to open question creator:",e),s("Failed to open question creator","error")}}async function A(){const e=document.getElementById("quiz-title").value.trim(),t=document.getElementById("quiz-description").value.trim(),o=document.getElementById("quiz-category").value;if(!e){s("Please enter a quiz title","error");return}if(n.length===0){s("Please add at least one question to the quiz","error");return}const i={title:e,description:t,categoryId:o||void 0,questions:n.map(r=>r.id||r._id),type:"standard",settings:{shuffleQuestions:!1,shuffleAnswers:!1,showCorrectAnswers:!0}};try{const r=await m.create(i);s("Quiz saved successfully!","success"),localStorage.removeItem("quizCreatorState"),localStorage.removeItem("quizCreatorMode"),setTimeout(()=>{window.location.href="quizzes.html"},1e3)}catch(r){console.error("Failed to save quiz:",r),s("Failed to save quiz: "+r.message,"error")}}function Q(){n.length>0?confirm("Are you sure you want to cancel? All unsaved changes will be lost.")&&(localStorage.removeItem("quizCreatorState"),localStorage.removeItem("quizCreatorMode"),window.location.href="quizzes.html"):(localStorage.removeItem("quizCreatorState"),localStorage.removeItem("quizCreatorMode"),window.location.href="quizzes.html")}function T(){n.length>0?confirm("You have unsaved changes. Are you sure you want to leave?")&&(window.location.href="classes.html"):window.location.href="classes.html"}window.addEventListener("DOMContentLoaded",()=>{const e=localStorage.getItem("quizCreatorState");if(e)try{const t=JSON.parse(e);document.getElementById("quiz-title").value=t.title||"",document.getElementById("quiz-description").value=t.description||"",document.getElementById("quiz-category").value=t.categoryId||"",t.questions&&t.questions.length>0&&(n=t.questions,u())}catch(t){console.error("Error restoring quiz state:",t)}});window.quizCreator={moveQuestion:b,removeQuestion:S,addFromQuestionBank:B,createNewQuestion:C,saveQuiz:A,cancelQuiz:Q,goHome:T};
